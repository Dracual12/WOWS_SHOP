import sys
import os
import time
from pyexpat.errors import messages

from flask import request

project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))

if project_root not in sys.path:
    sys.path.append(project_root)

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, FSInputFile
from aiogram.filters import Command
import asyncio
import bot.config as config
import os
from bot.db import add_user
import requests

from bot.db import get_db_connection



botik = Bot(token=config.BOT_TOKEN)

dp = Dispatcher()

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    telegram_id = message.from_user.id
    add_user(telegram_id)
    with open(f"{os.getcwd()}/bot/assets/welcome.jpeg", "rb") as image:
        photo = FSInputFile(f"{os.getcwd()}/bot/assets/welcome.jpeg")
        await botik.send_photo(
            chat_id=message.chat.id,
            photo=photo,
            caption=(
                f"–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–æ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –ê–†–ú–ê–î–ê, –≥–¥–µ –∫–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ World of Warships: Legends —Å–º–æ–∂–µ—Ç –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥—É–±–ª–æ–Ω—ã –¥–ª—è —Å–≤–æ–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ –ª—é–±–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ!\n\n"

                f"üí• –ß—Ç–æ –Ω–æ–≤–æ–≥–æ?\n"
                " - –£–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏ –µ—â–µ –ø—Ä–æ—â–µ.\n"
                "- –ü–æ–ª–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å PlayStation, Xbox –∏ –¥—Ä—É–≥–∏–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏.\n"
                "- –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –¥—É–±–ª–æ–Ω–æ–≤ ‚Äî –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∏—Ö –º–≥–Ω–æ–≤–µ–Ω–Ω–æ!\n\n"

                f"üéØ –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å?\n"
                f"- –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚Äî –≤–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ –ø–æ–ª–Ω–æ–π —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç–∏.\n"
                f"- –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–Ω—ã –∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∞–∫—Ü–∏–∏ –¥–ª—è –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.\n"
                f"- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 ‚Äî –º—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!\n\n"
                
                f"–ü–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ –º–æ—Ä—Å–∫–∏–µ —Å—Ä–∞–∂–µ–Ω–∏—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏, –ø—Ä–∏–æ–±—Ä–µ—Ç–∞—è –¥—É–±–ª–æ–Ω—ã –≤ –Ω–∞—à–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º –±–æ—Ç–µ! ‚öì"
            ),
            reply_markup=main_menu()
        )

def main_menu():
    buttons = [
        [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –ú–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=config.WEB_APP_URL))],
        [InlineKeyboardButton(text="\U0001F4DD –û—Ç–∑—ã–≤—ã", url="https://t.me/armada_feedback")],
        [InlineKeyboardButton(text="\U0001F4E9 –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", url="https://t.me/armada_support")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def pay(link):
    buttons =  [
        [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=link)],
        [InlineKeyboardButton(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", url="https://clck.ru/3GgzNq"),
        InlineKeyboardButton(text="–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", url="https://clck.ru/3GHACe")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def get_link(user):
    conn = get_db_connection()
    last_order = conn.execute('SELECT id FROM orders WHERE user_id = ? ORDER BY id DESC LIMIT 1', (user,)).fetchone()
    order_id = int(dict(last_order)['id']) + 100060
    last_cart = conn.execute('SELECT cart FROM orders ORDER BY id DESC LIMIT 1').fetchone()
    last_cart = dict(last_cart)
    cart = int((last_cart['cart'].split('–ò—Ç–æ–≥–æ:')[1]).split()[0])
    conn.close()
    url = f"https://payment.alfabank.ru/payment/rest/register.do?token=oj5skop8tcf9a8mmoh9ssb31ei&orderNumber={order_id}&amount={cart}&returnUrl=https://t.me/armada_gold_bot"
    response = requests.get(url)

    k  = response.json()
    if 'formUrl' in k:
        a = k['formUrl']
        message_obj = await botik.send_message(user,
                                               text=f"–ù–∞–∂–∏–º–∞—è ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª  –í—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è –ü–æ–ª–∏—Ç–∏–∫–∏ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –°–æ–≥–ª–∞—à–µ–Ω–∏—è",
                                               reply_markup=pay(a))
        conn = get_db_connection()
        order_message_id = conn.execute('UPDATE users SET message_id = ? WHERE telegram_id = ?',
                                        (message_obj.message_id, user))
        conn.commit()
        conn.close()
        await check(k['orderId'], user)
    else:
        print("–ö–ª—é—á 'formUrl' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ k:", k)
        # –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ –∫–ª—é—á–∞ –Ω–µ—Ç

async def order_text(user):
    conn = get_db_connection()
    cursor = conn.cursor()
    # –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞
    cursor.execute("""
            SELECT * FROM orders 
            WHERE user_id = ? 
            ORDER BY id DESC 
            LIMIT 1
        """, (user,))
    row = cursor.fetchone()  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å

    conn.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

    if row:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å
        return dict(row)
    else:
        return None


async def check(orderId, user):
    url = f'https://payment.alfabank.ru/payment/rest/getOrderStatus.do?token=oj5skop8tcf9a8mmoh9ssb31ei&orderId={orderId}'
    start_time = time.time()
    duration = 5 * 60
    interval = 5
    glag = False
    while time.time() - start_time < duration:
        data = requests.get(url).json()
        if data['OrderStatus'] == 2:
            glag = True
            break
        time.sleep(interval)

    conn = get_db_connection()
    if glag:
        row = conn.execute('SELECT * FROM users WHERE telegram_id = ?', (user,)).fetchone()
        if row:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
            row_dict = dict(row)
        await botik.edit_message_text(
            chat_id=user,  # ID —á–∞—Ç–∞ (telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            message_id=conn.execute('SELECT message_id FROM users WHERE telegram_id = ?', (user,)).fetchone()[0],
            # ID —Å–æ–æ–±—â–µ–Ω–∏—è
            text='–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!'  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—Ç—Ä–æ–∫–∞)
        )
        conn.execute("DELETE FROM cart WHERE user_id = ?", (user,))
        conn.commit()
        data = await order_text(user)
        print(data)
        message = f"""
        <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</b>
        ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
        üÜî <b>ID –∑–∞–∫–∞–∑–∞:</b> {data['id']}
        üë§ <b>User ID:</b> {data['user_id']}
        üõí <b>–ö–æ—Ä–∑–∏–Ω–∞:</b> {data['cart']}
        üîë <b>OTP-–∫–æ–¥:</b> {data['otp_code']}
        üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ Telegram:</b> <a href="{data['telegram_link']}">–ü–µ—Ä–µ–π—Ç–∏</a>
        ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
        –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑! üòä
        """
        await botik.send_message(config.ADMIN_ID, message)
    else:
        await botik.edit_message_text(user, conn.execute('SELECT message_id FROM users WHERE telegram_id = ?',
                                                         (user,)).fetchone()[0], '–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –∏—Å—Ç–µ–∫–ª–æ')
        url2 = f'https://payment.alfabank.ru/payment/rest/getOrderStatus.do?token=oj5skop8tcf9a8mmoh9ssb31ei&orderId={orderId}'
        requests.get(url2)

async def main():
    await dp.start_polling(botik)

if __name__ == "__main__":
    asyncio.run(main())
