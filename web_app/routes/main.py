import time

from flask import Blueprint, render_template, request, jsonify, current_app
from web_app import db
from ..utils.helpers import format_order_summary, order_text
from ..utils.telegram import send_telegram, edit_telegram_message
from ..config import Config

bp = Blueprint('main', __name__)
from bot.db import get_db_connection
import requests
import json
from ..config import Config


def pay(link):
    keyboard = {
        "inline_keyboard": [
            [
                {"text": "–û–ø–ª–∞—Ç–∏—Ç—å", "url": f"{link}"},
                {"text": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", "url": "https://clck.ru/3GgzNq"}
            ],
            [
                {"text": "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", "url": "https://clck.ru/3GHACe"}
            ]
        ]
    }
    return keyboard


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
def get_link(user, login, password):
    conn = get_db_connection()
    conn.execute("INSERT INTO orders (user_id) VALUES (?)", (user,))
    conn.commit()
    last_order = conn.execute('SELECT id FROM orders WHERE user_id = ? ORDER BY id DESC LIMIT 1', (user,)).fetchone()[0]
    print(last_order)
    order_id = int(last_order) + 102075
    last_cart = db.get_cart_items(user)

    total = sum(item['price'] * item['quantity'] for item in last_cart)
    conn.close()

    url = f"https://payment.alfabank.ru/payment/rest/register.do?token=oj5skop8tcf9a8mmoh9ssb31ei&orderNumber={order_id}&amount={int(total) * 100}&returnUrl=https://t.me/armada_gold_bot"
    response = requests.get(url)
    text = response.text
    try:
        k = json.loads(text)  # –†—É—á–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ JSON
    except json.JSONDecodeError as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON:", e)
        return
    print(k)
    if 'formUrl' in k:
        a = k['formUrl']
        k2 = send_telegram(Config.BOT_TOKEN, user,
                           "–ù–∞–∂–∏–º–∞—è ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª –í—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è –ü–æ–ª–∏—Ç–∏–∫–∏ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –°–æ–≥–ª–∞—à–µ–Ω–∏—è",
                           pay(a))
        conn = get_db_connection()
        conn.execute('UPDATE users SET message_id = ? WHERE telegram_id = ?', (k2, user))
        conn.commit()
        conn.close()
        check(k['orderId'], user, login, password)
    else:
        print("–ö–ª—é—á 'formUrl' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ k:", k)


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
def check(orderId, user, login, password):
    url = f'https://payment.alfabank.ru/payment/rest/getOrderStatus.do?token=oj5skop8tcf9a8mmoh9ssb31ei&orderId={orderId}'
    start_time = time.time()
    duration = 5 * 60  # 5 –º–∏–Ω—É—Ç
    interval = 5  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (5 —Å–µ–∫—É–Ω–¥)
    glag = False

    while time.time() - start_time < duration:
        try:
            response = requests.get(url)

            data = response.json()
            if data['OrderStatus'] == 2:
                glag = True
                break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: {e}")
        time.sleep(interval)

    conn = get_db_connection()
    if glag:
        edit_telegram_message(Config.BOT_TOKEN, user,
                              conn.execute('SELECT message_id FROM users WHERE telegram_id = ?', (user,)).fetchone()[0],
                              '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!')
        conn.execute("DELETE FROM cart WHERE user_id = ?", (user,))
        conn.commit()
        data = order_text(user)
        message = f"""
        –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:
        ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
        üÜî ID –∑–∞–∫–∞–∑–∞: {data['id']}
        üë§ User ID: id <a href="tg://user?id={data['user_id']}">{data['user_id']}</a>
        üõí –ö–æ—Ä–∑–∏–Ω–∞: {data['cart']}
        üîë –õ–æ–≥–∏–Ω;–ü–∞—Ä–æ–ª—å: {login}:{password}
        ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
        –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑! üòä
        """
        send_telegram( Config.BOT_TOKEN, Config.ADMIN_ID, message)
    else:
        edit_telegram_message(Config.BOT_TOKEN, user,
                              conn.execute('SELECT message_id FROM users WHERE telegram_id = ?', (user,)).fetchone()[0],
                              '–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –∏—Å—Ç–µ–∫–ª–æ')
        url2 = f'https://payment.alfabank.ru/payment/rest/getOrderStatus.do?token=oj5skop8tcf9a8mmoh9ssb31ei&orderId={orderId}'
        requests.get(url2)


@bp.route('/')
def index():
    current_app.logger.info('–û—Ç–∫—Ä—ã—Ç–∞ –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞')
    return render_template('index.html')


@bp.route('/api/sections')
def get_sections():
    current_app.logger.info('–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–µ–∫—Ü–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤')
    try:
        sections = db.get_sections()
        products = db.get_products()

        current_app.logger.info(f'–ü–æ–ª—É—á–µ–Ω–æ —Ä–∞–∑–¥–µ–ª–æ–≤: {len(sections)}')
        current_app.logger.info(f'–ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}')
        current_app.logger.info(f'–°–µ–∫—Ü–∏–∏: {sections}')
        current_app.logger.info(f'–¢–æ–≤–∞—Ä—ã: {products}')

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–∫—Ü–∏–∏ –ø–æ order_index
        sorted_sections = sorted(sections, key=lambda x: x['order_index'])

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
        sections_with_products = []
        for section in sorted_sections:
            section_products = [p for p in products if p.get('section') == section['name']]
            current_app.logger.info(f'–¢–æ–≤–∞—Ä—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ {section["name"]}: {section_products}')
            sections_with_products.append({
                'id': section['id'],
                'section_name': section['name'],
                'products': section_products
            })

        current_app.logger.info(f'–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {sections_with_products}')
        return jsonify(sections_with_products)
    except Exception as e:
        current_app.logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–æ–≤: {str(e)}')
        return jsonify({"status": "error", "message": str(e)}), 500


@bp.route("/save-tg-id", methods=["POST"])
def save_tg_id():
    data = request.get_json()
    tg_id = data.get('tg_id')
    if tg_id:
        current_app.logger.info(f'–°–æ—Ö—Ä–∞–Ω–µ–Ω Telegram ID: {tg_id}')
        return jsonify({"status": "success"})
    current_app.logger.warning('–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Å—Ç–æ–π Telegram ID')
    return jsonify({"status": "error"})


@bp.route('/save-otp', methods=['POST'])
def save_otp():
    data = request.get_json()
    otp = data.get('otp')
    if otp:
        current_app.logger.info('–°–æ—Ö—Ä–∞–Ω–µ–Ω OTP –∫–æ–¥')
        return jsonify({"status": "success"})
    current_app.logger.warning('–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Å—Ç–æ–π OTP –∫–æ–¥')
    return jsonify({"status": "error"})


@bp.route('/save_tg_link', methods=['POST'])
def save_link():
    data = request.get_json()
    link = data.get('link')
    if link:
        current_app.logger.info(f'–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: {link}')
        return jsonify({"status": "success"})
    current_app.logger.warning('–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Å—Ç—É—é —Å—Å—ã–ª–∫—É')
    return jsonify({"status": "error"})


@bp.route('/api/order/end', methods=['POST'])
def end_order():
    data = request.get_json()
    user = data.get('user_id')
    login = data.get('login')
    password = data.get('password')
    print(data)
    if user and login and password:
        current_app.logger.info(f'–û—Ñ–æ—Ä–º–ª–µ–Ω –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user}')
        get_link(user, login, password)
    else:
        current_app.logger.warning('–ü–æ–ø—ã—Ç–∫–∞ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏')

    return jsonify({"status": "error"})


@bp.route('/api/order/latest', methods=['POST'])
def get_latest_order():
    current_app.logger.info('–ó–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞')
    return jsonify({"status": "success"})


@bp.route('/product/<int:product_id>')
def product_page(product_id):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
        products = db.get_products()
        current_app.logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã: {products}")
        current_app.logger.info(f"–ò—â–µ–º —Ç–æ–≤–∞—Ä —Å ID: {product_id}")

        # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä
        product = next((p for p in products if p['id'] == product_id), None)
        current_app.logger.info(f"–ù–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä: {product}")

        if product:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ URL
            tg_id = request.args.get('tg_id')
            first_name = request.args.get('first_name')
            last_name = request.args.get('last_name')
            username = request.args.get('username')
            language_code = request.args.get('language_code')
            start_param = request.args.get('start_param')
            auth_date = request.args.get('auth_date')
            hash = request.args.get('hash')

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º tg_id –≤ —á–∏—Å–ª–æ
            if tg_id:
                try:
                    tg_id = int(tg_id)
                except ValueError:
                    current_app.logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç tg_id: {tg_id}")
                    tg_id = None

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º auth_date –≤ —á–∏—Å–ª–æ
            if auth_date:
                try:
                    auth_date = int(auth_date)
                except ValueError:
                    current_app.logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç auth_date: {auth_date}")
                    auth_date = None

            current_app.logger.info(f"–û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞ {product_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}")
            return render_template('product.html',
                                   product=product,
                                   tg_id=tg_id,
                                   first_name=first_name,
                                   last_name=last_name,
                                   username=username,
                                   language_code=language_code,
                                   start_param=start_param,
                                   auth_date=auth_date,
                                   hash=hash)
        else:
            current_app.logger.warning(f"–¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return render_template('product.html', product=None)

    except Exception as e:
        current_app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞: {str(e)}")
        return render_template('product.html', product=None)


@bp.route('/api/cart', methods=['POST'])
def add_to_cart():
    current_app.logger.info('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É')
    try:
        data = request.get_json()
        product_id = data.get('product_id')
        tg_id = data.get('tg_id')
        quantity = data.get('quantity', 1)

        if not product_id or not tg_id:
            current_app.logger.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã')
            return jsonify({"status": "error", "message": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"}), 400

        current_app.logger.info(f'–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ {product_id} –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}')

        if db.add_to_cart(tg_id, product_id, quantity):
            current_app.logger.info('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É')
            return jsonify({"status": "success"})
        else:
            current_app.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É')
            return jsonify({"status": "error", "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"}), 500

    except Exception as e:
        current_app.logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É: {str(e)}')
        return jsonify({"status": "error", "message": str(e)}), 500


@bp.route('/order', methods=['GET'])
def order_form():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ñ–æ—Ä–º—É –∑–∞–∫–∞–∑–∞"""
    tg_id = request.args.get('tg_id')
    if not tg_id:
        return jsonify({"status": "error", "message": "–ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"}), 400

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    cart_items = db.get_cart_items(tg_id)
    if not cart_items:
        return jsonify({"status": "error", "message": "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"}), 400

    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
    total_price = sum(item['price'] * item['quantity'] for item in cart_items)

    return render_template('order_form.html',
                           cart_items=cart_items,
                           total_price=total_price)


@bp.route('/api/order', methods=['POST'])
def create_order():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑"""
    try:
        data = request.get_json()
        required_fields = ['user_id', 'login', 'password']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
        for field in required_fields:
            if field not in data:
                return jsonify({"status": "error", "message": f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}"}), 400

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        cart_items = db.get_cart_items(data['user_id'])
        if not cart_items:
            return jsonify({"status": "error", "message": "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"}), 400

        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
        total_price = sum(item['price'] * item['quantity'] for item in cart_items)

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order_id = db.create_order(
            user_id=data['user_id'],
            login=data['login'],
            password=data['password'],
            items=cart_items,
            total_price=total_price
        )

        if order_id:
            # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            db.clear_cart(data['user_id'])
            return jsonify({"status": "success", "order_id": order_id})
        else:
            return jsonify({"status": "error", "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞"}), 500

    except Exception as e:
        current_app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500
